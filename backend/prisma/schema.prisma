// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  summary     String?
  location    String?
  profileImage String?
  socialLinks Json?    // Store social links as JSON
  skills      Json?    // Store skills array as JSON (deprecated, use userSkills relation)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userSkills UserSkill[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  githubUrl   String?
  demoUrl     String?
  technologies Json?   // Store technologies array as JSON
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("projects")
}

model Certificate {
  id           String   @id @default(cuid())
  title        String
  organization String
  date         DateTime
  certificateUrl String?
  imageUrl     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("certificates")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("contacts")
}

model Skill {
  id        String   @id @default(cuid())
  name      String   @unique
  logoUrl   String?
  logoSvg   String? @db.LongText  // Raw SVG markup stored as long text
  category  String?  // e.g., "Frontend", "Backend", "Database", "DevOps"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to user skills
  userSkills UserSkill[]

  @@map("skills")
}

model UserSkill {
  id      String @id @default(cuid())
  userId  String
  skillId String
  level   Int    @default(50) // Proficiency level 0-100

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
  @@map("user_skills")
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}
